pipeline {
    agent {
        label 'direct-linux-cluster'
    }

    stages {
        stage('Stage 1 - Initial Setup') {
            steps {
                echo 'Running initial setup...'
                sh '''
                    sudo apt update

                    # Clean up workspace and older files
                    echo $PWD
                    rm -f Dockerfile
                    ls -ltrha

                    # Stop and remove nginx container if it exists
                    if [ $(docker ps -a -q --filter="name=nginx") ]; then
                        docker stop nginx
                        docker rm nginx
                        echo "Stopped and removed existing nginx container."
                    else
                        echo "No nginx container running."
                    fi
                '''
            }
        }

        stage('Stage 2 - Build') {
            steps {
                echo 'Building the application...'
                sh '''
                    # Create a more advanced Dockerfile
                    cat <<EOL > Dockerfile
                    # Start from the official nginx image
                    FROM nginx:latest

                    # Set environment variables
                    ENV APP_NAME="My Custom Nginx" \
                        AUTHOR="Jenkins Pipeline"

                    # Install additional tools inside the image
                    RUN apt update && apt install -y curl vim

                    # Create a custom HTML page directly within the Dockerfile
                    RUN echo "<html><head><title>Welcome to $APP_NAME</title></head>" > /usr/share/nginx/html/index.html && \
                        echo "<body><h1>Hello from $APP_NAME by $AUTHOR!</h1></body></html>" >> /usr/share/nginx/html/index.html

                    # Add a health check to ensure nginx is running
                    HEALTHCHECK --interval=30s --timeout=10s \
                        CMD curl -f http://localhost/ || exit 1

                    # Expose the port nginx will run on
                    EXPOSE 80

                    # Start nginx service
                    CMD ["nginx", "-g", "daemon off;"]
                    EOL

                    # Build the Docker image
                    docker build -t my-nginx-image .
                '''
            }
        }

        stage('Stage 3 - Test') {
            steps {
                echo 'Running tests...'
                sh '''
                    # Check if Dockerfile exists and run sha256sum on it
                    if [ -f Dockerfile ]; then
                        sha256sum Dockerfile
                    else
                        echo "Dockerfile not found!"
                        exit 1
                    fi
                '''
            }
        }

        stage('Stage 4 - Deploy') {
            steps {
                echo 'Deploying the application...'
                sh '''
                    # Run the Docker container and expose ports
                    docker run -d --name nginx-container -p 8888:80 my-nginx-image

                    # Wait for a few seconds to ensure nginx is up
                    sleep 5

                    # Run nc to check if nginx is running on port 8888
                    nc -zv localhost 8888
                '''
            }
        }

        stage('Stage 5 - Cleanup') {
            steps {
                echo 'Cleaning up after deployment...'
                sh '''
                    # Sleep for 1 minute before stopping the container
                    sleep 60

                    # Stop the nginx container
                    docker stop nginx-container
                '''
            }
        }
    }

    post {
        always {
            sh '''docker ps -a'''
            echo 'Pipeline execution completed!'
        }
    }
}
